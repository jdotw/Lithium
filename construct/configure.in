dnl Process this file with autoconf to produce a configure script.
AC_INIT(src/main.c)

VERSION=5.0.9
PACKAGE=construct

AM_INIT_AUTOMAKE($PACKAGE, $VERSION)

AM_MAINTAINER_MODE

AM_CONFIG_HEADER(src/config.h)

dnl Compiler flags
if test "${CFLAGS}" == "" ; then
  CFLAGS="-O2 -pipe -W -Wall -Wno-unused-parameter -Werror"
fi

dnl Checks for programs.
AC_PROG_CC
AC_ISC_POSIX
dnl AC_PROG_LIBTOOL
AC_PROG_INSTALL
AC_PROG_LN_S

dnl Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADER(unistd.h, , AC_MSG_ERROR([Error : construct requires unistd.h]))
AC_CHECK_HEADER(sys/stat.h, , AC_MSG_ERROR([Error : construct requires sys/stat.h]))
AC_CHECK_HEADER(sys/types.h, , AC_MSG_ERROR([Error : construct requires sys/type.h]))
AC_CHECK_HEADER(sys/ipc.h, , AC_MSG_ERROR([Error : construct requires sys/ipc.h]))
AC_CHECK_HEADER(sys/socket.h, , AC_MSG_ERROR([Error : construct requires sys/socket.h]))
AC_CHECK_HEADER(sys/wait.h, , AC_MSG_ERROR([Error : construct requires sys/wait.h]))
AC_CHECK_HEADER(fcntl.h, , AC_MSG_ERROR([Error : construct requires fcntl.h]))
AC_CHECK_HEADER(stdlib.h, , AC_MSG_ERROR([Error : construct requires stdlib.h]))
AC_CHECK_HEADER(syslog.h, , AC_MSG_ERROR([Error : construct requires syslog.h]))
AC_CHECK_HEADER(netinet/in.h, , AC_MSG_ERROR([Error : construct requires netinet/in.h]))
AC_CHECK_HEADER(netdb.h, , AC_MSG_ERROR([Error : construct requires netdb.h]))
AC_CHECK_HEADER(errno.h, , AC_MSG_ERROR([Error : construct requires errno.h]))
AC_CHECK_HEADER(string.h, , AC_MSG_ERROR([Error : construct requires string.h]))

dnl ###########################################
dnl Check for socklen_t

AC_MSG_CHECKING([for socklen_t])
AC_CACHE_VAL(i_socklen_t,
[AC_TRY_COMPILE([
#include <sys/types.h>
#include <sys/socket.h>],
[socklen_t t;],
i_socklen_t=yes,
i_socklen_t=no,
)])
if test $i_socklen_t = no; then
AC_DEFINE(socklen_t, int, Define to 'int' if <sys/socket.h> doesn't define.)
fi
AC_MSG_RESULT($i_socklen_t)

dnl ###########################################
dnl Check for Berkeley DB

AC_ARG_WITH(db-includes,
            [  --with-db-includes Specify location of Berkeley DB headerfiles],
            [db_incdir=$withval],
            [db_incdir=/usr/include])

AC_ARG_WITH(db,
            [  --with-db Specify name of Berkeley DB library],
            [db_lib=$withval],
            [db_lib=db-4])

AC_ARG_WITH(db-libs,
            [  --with-db-libs Specify location of Berkeley DB libraries],
            [db_libdir=$withval],
            [db_libdir=/usr/lib])

db_subdir_header="$db_incdir/db4/db.h"
db_header="$db_incdir/db.h"
echo "--------------------------------------------------------"
echo "*   Looking for Berkeley DB as                 $db_lib"
echo "*   Looking for Berkeley DB header files in    $db_incdir"
echo "*   Looking for Berkeley DB library files in   $db_libdir"
echo "*   Use --with-db and --with-db-includes and --with-db-libs to set these locations"

CFLAGS="$CFLAGS -I$db_incdir"
LDFLAGS="$LDFLAGS -L$db_libdir"

AC_CHECK_HEADER($db_subdir_header, AC_DEFINE(DB4_HEADER_SUBDIR), )
AC_CHECK_LIB($db_lib, db_version, , AC_MSG_ERROR([Error : construct requires db4]), )


dnl ###########################################
dnl Check for libdl

dnl AC_ARG_WITH(libdl-includes, 
dnl            [  --with-libdl-includes Specify location of libdl headerfiles],
dnl            [libdl_incdir=$withval],
dnl            [libdl_incdir=/usr/include])

dnl AC_ARG_WITH(libdl-libs,        
dnl            [  --with-libdl-libs Specify location of libdl libraries],
dnl            [libdl_libdir=$withval],
dnl            [libdl_libdir=/usr/lib])

dnl libdl_header="$libdl_incdir/dlfcn.h"
dnl echo "--------------------------------------------------------"
dnl echo "*   Looking for libdl header files in     $libdl_incdir"
dnl echo "*   Looking for libdl library files in    $libdl_libdir"
dnl echo "*   Use --with-libdl-includes and --with-libdl-libs to set these locations"

dnl CFLAGS="$CFLAGS -I$libdl_incdir"
dnl LDFLAGS="$LDFLAGS -L$libdl_libdir"

dnl AC_CHECK_HEADER($libdl_header, , AC_MSG_ERROR([Error : construct requires libdl's dlfcn.h]))
dnl AC_CHECK_LIB(dl, dlopen, , AC_MSG_ERROR([Error : construct requires libdl]), )

AC_SEARCH_LIBS(dlopen, dl)

dnl ###########################################
dnl Check for crypt lib

dnl AC_ARG_WITH(crypt,
dnl             [  --with-crypt Specify name of cryptography library (e.g 'crypt' or 'crypto')],
dnl            [crypt_lib=$withval],
dnl            [crypt_lib=crypt])

dnl AC_ARG_WITH(crypt-libs,
dnl             [  --with-crypt-libs Specify location of cryptography libraries],
dnl            [crypt_libdir=$withval],
dnl            [crypt_libdir=/usr/lib])

AC_SEARCH_LIBS(crypt,  crypto)

echo "--------------------------------------------------------"
echo "*   Looking for cryptography library              $crypt_lib"
echo "*   Looking for cryptography library files in     $crypt_libdir"
echo "*   Use --with-crypt to set the cryptography library name"
echo "*   Use --with-crypt-libs to set the location of the library"

dnl LDFLAGS="$LDFLAGS -L$crypt_libdir"

dnl AC_CHECK_LIB($crypt_lib, crypt, , AC_MSG_ERROR([Error : construct requires a cryptography library]), )

dnl ###########################################
dnl Check for postgresql

AC_ARG_WITH(postgres-includes,
            [  --with-postgres-includes Specify location of PostgreSQL headerfiles],
            [postgres_incdir=$withval],
            [postgres_auto_incdir=yes])

AC_ARG_WITH(postgres-libs,
            [  --with-postgres-libs Specify location of PostgreSQL libraries],
            [postgres_libdir=$withval],
            [postgres_auto_libdir=yes])

if test $postgres_auto_incdir = "yes"; then
  postgres_incdir=`pg_config --includedir`
  if test ! $postgres_incdir; then
    postgres_incdir="/usr/include"
  fi
fi

if test $postgres_auto_libdir = "yes"; then
  postgres_libdir=`pg_config --libdir`
  if test ! $postgres_libdir; then
    postgres_libdir="/usr/lib"
  fi
fi

postgres_header="$postgres_incdir/libpq-fe.h"
echo "--------------------------------------------------------"
echo "*   Looking for PostgreSQL header files in    $postgres_incdir"
echo "*   Looking for PostgreSQL library files in   $postgres_libdir"
echo "*   Use --with-postgres-includes and --with-postgres-libs to set these locations"

CFLAGS="$CFLAGS -I$postgres_incdir"
LDFLAGS="$LDFLAGS -lcrypto -lssl -L$postgres_libdir"

AC_CHECK_HEADER($postgres_header, , AC_MSG_ERROR([Error : construct requires PostgreSQLs libpq-fe.h]))
AC_CHECK_LIB(pq, PQexec, , AC_MSG_ERROR([Error : construct requires PostgreSQL]), )

dnl ###########################################
dnl Check for sqlite3

AC_SEARCH_LIBS(sqlite3_open,  sqlite3)

dnl ###########################################
dnl Check for SNMP (ucd-snmp or net-snmp)

dnl AC_ARG_WITH(snmp-includes,
dnl             [  --with-snmp-includes Specify location of SNMP headerfiles],
dnl             [snmp_incdir=$withval],
dnl             [snmp_incdir=/usr/include])

dnl AC_ARG_WITH(snmp-libs,
dnl             [  --with-snmp-libs Specify location of SNMP libraries],
dnl             [snmp_libdir=$withval],
dnl             [snmp_libdir=/usr/lib])

dnl ucdsnmp_header="$snmp_incdir/ucd-snmp/ucd-snmp-config.h"
dnl netsnmp_header="$snmp_incdir/net-snmp/version.h"
dnl echo "--------------------------------------------------------"
dnl echo "*   Looking for SNMP header files in      $snmp_incdir"
dnl echo "*   Looking for SNMP library files in     $snmp_libdir"
dnl echo "*   Use --with-snmp-includes to set this location"

dnl CFLAGS="$CFLAGS -I$snmp_incdir"
dnl LDFLAGS="$LDFLAGS -I$snmp_libdir"

dnl AC_CHECK_HEADER([$netsnmp_header], AC_DEFINE(NET_SNMP), [AC_CHECK_HEADER([$ucdsnmp_header], , AC_MSG_ERROR([Error : construct requires headers from either ucd-snmp or net-snmp or similar]))])
dnl AC_CHECK_LIB(netsnmp, init_snmp, , [AC_CHECK_LIB(snmp, init_snmp, , AC_MSG_ERROR([Error : construct requires either ucd-snmp or net-snmp]), )], )

AC_SEARCH_LIBS(init_snmp,  netsnmp.15)
dnl AC_SEARCH_LIBS(init_agent,  netsnmpagent.15)
dnl AC_SEARCH_LIBS(snmp_log,  netsnmphelpers.15)
dnl AC_SEARCH_LIBS(init_snmp_mib,  netsnmpmibs.15)

dnl ###########################################
dnl Check for libxml2

AC_ARG_WITH(xml-includes,
            [  --with-xml-includes Specify location of libxml2 headerfiles],
            [xml_incdir=$withval],
            [xml_incdir=/usr/include])

AC_ARG_WITH(xml-libs,
            [  --with-xml-libs Specify location of libxml2 libraries],
            [xml_libdir=$withval],
            [xml_libdir=/usr/lib])

xml_header="$xml_incdir/libxml/xmlexports.h"
echo "--------------------------------------------------------"
echo "*   Looking for libxml2 header files in    $xml_incdir"
echo "*   Looking for libxml2 library files in   $xml_libdir"
echo "*   Use --with-xml-includes and --with-xml-libs to set these locations"

CFLAGS="$CFLAGS -I$xml_incdir"
LDLAGS="$LDFLAGS -I$xml_libdir"

AC_CHECK_HEADER($xml_header, , AC_MSG_ERROR([Error : Induction requires libxml2's libxml/xmlexports.h]))
AC_CHECK_LIB(xml2, xmlReadMemory, , AC_MSG_ERROR([Error : construct requires libxml2]), )

dnl ###########################################
dnl Check for induction

AC_ARG_WITH(induction-includes,
            [  --with-induction-includes Specify location of induction headerfiles],
            [induction_incdir=$withval],
            [induction_incdir=/usr/include])

AC_ARG_WITH(induction-libs,
            [  --with-induction-libs Specify location of induction libraries],
            [induction_libdir=$withval],
            [induction_libdir=/usr/lib])

induction_header="$induction_incdir/induction/version.h"
echo "--------------------------------------------------------"
echo "*   Looking for induction header files in     $induction_incdir"
echo "*   Looking for induction library files in    $induction_libdir"
echo "*   Use --with-induction-includes and --with-induction-libs to set these locations"

CFLAGS="$CFLAGS -I$induction_incdir"
LDFLAGS="$LDFLAGS -L$induction_libdir"

AC_CHECK_HEADER($induction_header, , AC_MSG_ERROR([Error : construct requires induction's induction.h]))
AC_CHECK_LIB(induction, i_version, , AC_MSG_ERROR([Error : construct requires induction]), )

dnl ###########################################
dnl Create makefiles

echo "--------------------------------------------------------"
AC_OUTPUT(	Makefile 		\
		src/Makefile		\
		)
